# レビュールール

## レビュー対象ファイル
- `.cursor/rules/*` - コーディングルール
- `.cursor/rules/architecture.mdc` - アーキテクチャルール
- `README.md` - プロジェクト概要とGitブランチ方針

## レビューの基本方針

### 1. コード品質の確認
- **型安全性**: TypeScriptの型定義が適切か
- **命名規則**: 変数・関数・コンポーネント名が規約に従っているか
- **コメント**: 複雑なロジックに適切なコメントがあるか

### 2. アーキテクチャの確認
- **ディレクトリ構造**: 機能ごとの適切な分割がされているか
- **責務の分離**: UI層とロジック層が明確に分離されているか
- **コンポーネント設計**: 再利用可能な設計になっているか
- **状態管理**: Zustandの適切な使用

### 3. パフォーマンスの確認
- **不要な再レンダリング**: React.memo、useMemo、useCallbackの適切な使用
- **バンドルサイズ**: 不要な依存関係の削除
- **画像最適化**: Next.jsの画像最適化機能の活用

### 4. セキュリティの確認
- **環境変数**: 機密情報がハードコーディングされていないか
- **入力検証**: ユーザー入力の適切な検証
- **XSS対策**: 適切なエスケープ処理

## レビューチェックリスト

### 必須チェック項目
- [ ] TypeScriptの型エラーがない
- [ ] ESLintエラーがない
- [ ] 命名規則に従っている
- [ ] 不要なconsole.logが残っていない
- [ ] マジックナンバーが定数化されている
- [ ] any型の使用に理由がある（コメント記載）

### 推奨チェック項目
- [ ] コンポーネントが再利用可能に設計されている
- [ ] 適切なコメントが記載されている

### アーキテクチャチェック項目
- [ ] ディレクトリ構造が適切
- [ ] 責務が明確に分離されている
- [ ] 状態管理が適切に実装されている
- [ ] API呼び出しが適切に抽象化されている

## レビューコメントの書き方

### 良いコメントの例
```
👍 良い点:
- 型定義が明確で分かりやすい
- コンポーネントの責務が適切に分離されている
- エラーハンドリングが実装されている

🔧 改善提案:
- この関数は複雑なので、より小さな関数に分割することを検討してください
- この型定義は他の場所でも使えそうなので、共通化を検討してください

❓ 質問:
- この処理の意図を教えてください
- なぜこのアプローチを選択したのですか？
```

### 避けるべきコメント
- 個人的な好みの押し付け
- 具体的な改善案のない批判
- 技術的な根拠のない指摘

## レビュー優先度

### 高優先度（マージ前に必須）
- セキュリティ関連の脆弱性
- 型エラーやコンパイルエラー
- パフォーマンスに重大な影響を与える問題
- 既存機能を破壊する変更

### 中優先度（可能な限り修正）
- コードスタイルの不統一
- 命名規則の違反
- 不要なコードの残存
- ドキュメントの不備

### 低優先度（今後の改善として）
- パフォーマンスの最適化
- リファクタリングの提案
- 新機能の提案

## レビュー後のアクション

### 承認条件
- 必須チェック項目がすべて満たされている
- 高優先度の指摘事項が解決されている
- 中優先度の指摘事項が適切に処理されている

### 差し戻し条件
- セキュリティ上の問題がある
- 型エラーやコンパイルエラーがある
- 既存機能を破壊する変更がある
- レビューコメントへの対応が不十分

### マージ後のフォローアップ
- 低優先度の改善事項の実装計画
- パフォーマンス監視の実施
- ドキュメントの更新確認

