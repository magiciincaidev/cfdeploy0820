'use client'

import useCallStore from '@/src/infrastructure/store/callStore'
import { mockTodoItems } from '@/src/shared/data/mockData'
import { format } from 'date-fns'
import { useRouter } from 'next/navigation'
import { useEffect, useState } from 'react'

export default function AfterCallPage() {
  const router = useRouter()
  const { currentCustomer, currentSession, getTodoResults, resetSession, toggleTodo, isAuthenticated, initializeAuth } = useCallStore()

  const [afterCallTodos, setAfterCallTodos] = useState<{ [key: string]: boolean }>({})
  const [autoGeneratedTodos, setAutoGeneratedTodos] = useState<{ todoId: string, label: string, required: boolean, reason: string }[]>([])
  const [afterCallNotes, setAfterCallNotes] = useState<{ [key: string]: string }>({})

  const duringCallTodos = mockTodoItems.filter(t => t.phase === 'during')
  const afterCallTodoList = mockTodoItems.filter(t => t.phase === 'after')
  const todoResults = getTodoResults()

  useEffect(() => {
    initializeAuth()
    if (!isAuthenticated) {
      router.push('/')
      return
    }

    if (!currentSession || !currentSession.endTime) {
      router.push('/before-call')
      return
    }

    // Load from localStorage to reflect in-call TODO states
    const storageKey = `call-todos-${currentSession?.sessionId}`
    const savedTodos = JSON.parse(localStorage.getItem(storageKey) || '{}')

    // Update todo results in store with localStorage data
    Object.keys(savedTodos).forEach(todoId => {
      if (savedTodos[todoId]) {
        toggleTodo(todoId, true, '')
      }
    })

    // Generate automatic after-call TODOs based on completion status
    generateAutoTodos()
  }, [currentSession?.sessionId, currentSession?.endTime, router, isAuthenticated, initializeAuth])

  // Auto-generate TODOs on component mount only
  // Removed dependency on todoResults to prevent infinite loops

  const generateAutoTodos = () => {
    // Use localStorage instead of getTodoResults to avoid infinite loops
    const storageKey = `call-todos-${currentSession?.sessionId}`
    const savedTodos = JSON.parse(localStorage.getItem(storageKey) || '{}')

    const completedTodos = Object.keys(savedTodos).filter(todoId => savedTodos[todoId])
    const incompleteTodos = duringCallTodos.filter(todo => {
      return !savedTodos[todo.todoId]
    })

    const autoTodos: { todoId: string, label: string, required: boolean, reason: string }[] = []

    // Rule 1: If required items are incomplete → Add supervisor report
    const incompleteRequired = incompleteTodos.filter(t => t.required)
    if (incompleteRequired.length > 0) {
      autoTodos.push({
        todoId: 'auto-1',
        label: '上長への報告（必須項目未完了のため）',
        required: true,
        reason: `必須項目「${incompleteRequired.map(t => t.label).join('、')}」が未完了`
      })
    }

    // Rule 2: If payment promise was made → Add system input
    if (completedTodos.includes('t8') || completedTodos.includes('t11')) {
      autoTodos.push({
        todoId: 'auto-2',
        label: '返済約束内容のシステム入力',
        required: true,
        reason: '返済期日・金額の交渉または確認が完了したため'
      })
    }

    // Rule 3: If migration probability is high and negotiation occurred → Add next action
    if (currentCustomer?.migrationProbability && currentCustomer.migrationProbability >= 50 &&
      (completedTodos.includes('t7') || completedTodos.includes('t8'))) {
      autoTodos.push({
        todoId: 'auto-3',
        label: '次回アクション日の設定（移管確率高のため）',
        required: false,
        reason: `移管確率${currentCustomer.migrationProbability}%のため継続フォローが必要`
      })
    }

    // Rule 4: If fee guidance was provided → Add documentation
    if (completedTodos.includes('t10')) {
      autoTodos.push({
        todoId: 'auto-4',
        label: '手数料案内記録の作成',
        required: false,
        reason: '手数料案内を実施したため記録が必要'
      })
    }

    // Rule 5: If details were confirmed but optional items were skipped → Add review
    if (completedTodos.includes('t7') && incompleteTodos.some(t => !t.required)) {
      autoTodos.push({
        todoId: 'auto-5',
        label: '未実施項目の次回対応検討',
        required: false,
        reason: '事情確認は完了したが推奨項目に未実施があるため'
      })
    }

    setAutoGeneratedTodos(autoTodos)
  }

  const getCallDuration = () => {
    if (!currentSession?.startTime || !currentSession?.endTime) return '不明'
    const duration = new Date(currentSession.endTime).getTime() - new Date(currentSession.startTime).getTime()
    const minutes = Math.floor(duration / (1000 * 60))
    const seconds = Math.floor((duration % (1000 * 60)) / 1000)
    return `${minutes}分${seconds}秒`
  }

  const getCompletionStats = () => {
    const requiredTodos = duringCallTodos.filter(t => t.required)
    const completedRequired = todoResults.filter(r => {
      const todo = duringCallTodos.find(t => t.todoId === r.todoId)
      return r.checked && todo?.required
    })

    const optionalTodos = duringCallTodos.filter(t => !t.required)
    const completedOptional = todoResults.filter(r => {
      const todo = duringCallTodos.find(t => t.todoId === r.todoId)
      return r.checked && !todo?.required
    })

    return {
      required: { total: requiredTodos.length, completed: completedRequired.length },
      optional: { total: optionalTodos.length, completed: completedOptional.length }
    }
  }

  const handleAfterCallTodoToggle = (todoId: string, checked: boolean) => {
    setAfterCallTodos(prev => ({ ...prev, [todoId]: checked }))
    toggleTodo(todoId, checked, afterCallNotes[todoId])
  }

  const handleAfterCallNoteChange = (todoId: string, note: string) => {
    setAfterCallNotes(prev => ({ ...prev, [todoId]: note }))
  }

  const handleNewCall = () => {
    resetSession()
    router.push('/before-call')
  }

  const stats = getCompletionStats()
  const hasIncompleteRequired = stats.required.completed < stats.required.total

  // 認証されていない場合はローディング表示
  if (!isAuthenticated) {
    return (
      <div style={{
        minHeight: '100vh',
        background: '#FCFCFC',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
        <div style={{
          fontSize: '18px',
          color: '#666',
          fontFamily: 'Inter'
        }}>
          認証を確認中...
        </div>
      </div>
    )
  }

  if (!currentSession) {
    return <div>Loading...</div>
  }

  return (
    <div style={{
      position: 'relative',
      width: '1678px',
      height: 'auto',
      minHeight: '100vh',
      background: '#FCFCFC',
      margin: '0 auto',
      fontFamily: 'Inter, sans-serif'
    }}>

      {/* Header Container */}
      <div style={{
        position: 'absolute',
        width: '1766px',
        height: '111px',
        left: '-3px',
        top: '-3px',
        background: '#FFFFFF',
        boxShadow: '0px 0px 11px rgba(0, 0, 0, 0.25)'
      }}>
        {/* Brand Text */}
        <div style={{
          position: 'absolute',
          width: '300px',
          height: '34px',
          left: '69px',
          top: '41px',
          fontFamily: 'Inter',
          fontWeight: 600,
          fontSize: '28px',
          lineHeight: '34px',
          color: '#000000'
        }}>
          受架電支援AI — 8月検証版
        </div>
        <div style={{
          position: 'absolute',
          width: '150px',
          height: '20px',
          left: '400px',
          top: '50px',
          fontFamily: 'Inter',
          fontWeight: 400,
          fontSize: '16px',
          lineHeight: '20px',
          color: '#666666'
        }}>
          通話後処理画面
        </div>
      </div>

      {/* Status Pills */}
      <div style={{ position: 'absolute', top: '142px', left: '681px', display: 'flex', gap: '26px' }}>
        <div style={{
          width: '146px',
          height: '48px',
          borderRadius: '60px',
          background: '#D9D9D9',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '24px',
          fontFamily: 'Inter',
          color: '#000000'
        }}>
          架電前
        </div>
        <div style={{
          width: '146px',
          height: '48px',
          borderRadius: '60px',
          background: '#D9D9D9',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '24px',
          fontFamily: 'Inter',
          color: '#000000'
        }}>
          架電中
        </div>
        <div style={{
          width: '146px',
          height: '48px',
          borderRadius: '60px',
          background: '#005DDA',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: '24px',
          fontFamily: 'Inter',
          color: '#FFFFFF'
        }}>
          架電後
        </div>
      </div>

      {/* Main Content */}
      <div style={{ position: 'absolute', top: '223px', left: '55px', right: '55px' }}>

        {/* Call Summary Header */}
        <div style={{ background: '#FFFFFF', border: '1px solid #818181', borderRadius: '13px', padding: '24px', marginBottom: '20px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
            <h2 style={{ fontSize: '28px', fontWeight: 700, margin: 0, fontFamily: 'Inter', lineHeight: '34px' }}>通話完了 - 事後処理</h2>
            <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px', color: '#6B6B6B', fontFamily: 'Inter', fontSize: '18px', lineHeight: '22px' }}>
                <span>{currentCustomer?.name} ({currentCustomer?.accountNumber})</span>
              </div>
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px', color: '#6B6B6B', fontFamily: 'Inter', fontSize: '18px', lineHeight: '22px' }}>
                <span>通話時間: {getCallDuration()}</span>
              </div>
            </div>
          </div>

          {/* Completion Stats */}
          <div style={{ display: 'flex', gap: '24px' }}>
            <div style={{
              flex: 1,
              padding: '16px',
              background: hasIncompleteRequired ? '#FFF3E0' : '#F1F8E9',
              border: `1px solid ${hasIncompleteRequired ? '#FFA726' : '#81C784'}`,
              borderRadius: '8px'
            }}>
              <div style={{ fontSize: '14px', color: '#666', marginBottom: '8px', fontFamily: 'Inter' }}>必須項目完了率</div>
              <div style={{ fontSize: '24px', fontWeight: 600, color: hasIncompleteRequired ? '#F57C00' : '#388E3C', fontFamily: 'Inter' }}>
                {stats.required.completed}/{stats.required.total}
                {hasIncompleteRequired && (
                  <span style={{ fontSize: '16px', marginLeft: '8px' }}>⚠️ 未完了あり</span>
                )}
              </div>
            </div>
            <div style={{
              flex: 1,
              padding: '16px',
              background: '#E3F2FD',
              border: '1px solid #64B5F6',
              borderRadius: '8px'
            }}>
              <div style={{ fontSize: '14px', color: '#666', marginBottom: '8px', fontFamily: 'Inter' }}>推奨項目完了率</div>
              <div style={{ fontSize: '24px', fontWeight: 600, color: '#1976D2', fontFamily: 'Inter' }}>
                {stats.optional.completed}/{stats.optional.total}
              </div>
            </div>
          </div>

          {hasIncompleteRequired && (
            <div style={{
              marginTop: '16px',
              padding: '12px 16px',
              background: '#FFEBEE',
              border: '1px solid #E57373',
              borderRadius: '8px',
              color: '#C62828',
              fontFamily: 'Inter'
            }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                <span style={{ fontWeight: 600 }}>注意: 必須項目に未完了のものがあります。上長への報告を検討してください。</span>
              </div>
            </div>
          )}
        </div>

        <div style={{ display: 'flex', gap: '30px' }}>

          {/* Left Column - Call Results */}
          <div style={{ flex: 1 }}>
            {/* Completed TODOs Section */}
            <div style={{ background: '#FFFFFF', border: '1px solid #818181', borderRadius: '13px', padding: '24px', marginBottom: '20px' }}>
              <h3 style={{ fontSize: '28px', fontWeight: 700, marginBottom: '20px', fontFamily: 'Inter', lineHeight: '34px' }}>✅ 完了済み対応事項</h3>

              {duringCallTodos.filter(todo => {
                const result = todoResults.find(r => r.todoId === todo.todoId)
                return result?.checked || false
              }).map(todo => {
                const result = todoResults.find(r => r.todoId === todo.todoId)
                const isCompleted = true

                return (
                  <div key={todo.todoId} style={{
                    display: 'flex',
                    alignItems: 'flex-start',
                    gap: '16px',
                    padding: '16px',
                    marginBottom: '12px',
                    background: isCompleted ? '#F1F8E9' : '#FFEBEE',
                    border: `1px solid ${isCompleted ? '#81C784' : '#FFCDD2'}`,
                    borderRadius: '8px'
                  }}>
                    <div style={{
                      width: '32px',
                      height: '32px',
                      borderRadius: '50%',
                      background: isCompleted ? '#4CAF50' : '#F44336',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      color: '#FFF',
                      flexShrink: 0,
                      fontSize: '16px',
                      fontFamily: 'Inter'
                    }}>
                      {isCompleted ? '✓' : '✗'}
                    </div>

                    <div style={{ flex: 1 }}>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
                        {todo.required && (
                          <span style={{
                            padding: '2px 8px',
                            background: '#EB0000',
                            color: '#FFF',
                            borderRadius: '12px',
                            fontSize: '12px',
                            fontWeight: 600,
                            fontFamily: 'Inter'
                          }}>
                            必須
                          </span>
                        )}
                        <span style={{ fontSize: '16px', fontWeight: 500, fontFamily: 'Inter' }}>{todo.label}</span>
                        <span style={{
                          padding: '2px 8px',
                          background: isCompleted ? '#4CAF50' : '#F44336',
                          color: '#FFF',
                          borderRadius: '12px',
                          fontSize: '12px',
                          fontFamily: 'Inter'
                        }}>
                          {isCompleted ? '完了' : '未完了'}
                        </span>
                      </div>

                      {result?.note && (
                        <div style={{
                          padding: '8px 12px',
                          background: '#F5F5F5',
                          borderRadius: '6px',
                          fontSize: '14px',
                          color: '#666',
                          fontFamily: 'Inter'
                        }}>
                          メモ: {result.note}
                        </div>
                      )}

                      {result?.timestamp && (
                        <div style={{ fontSize: '12px', color: '#999', marginTop: '8px', fontFamily: 'Inter' }}>
                          {format(new Date(result.timestamp), 'HH:mm:ss')} に更新
                        </div>
                      )}
                    </div>
                  </div>
                )
              })}

              {duringCallTodos.filter(todo => {
                const result = todoResults.find(r => r.todoId === todo.todoId)
                return result?.checked || false
              }).length === 0 && (
                  <div style={{
                    padding: '20px',
                    textAlign: 'center',
                    color: '#666',
                    fontFamily: 'Inter',
                    fontSize: '18px',
                    lineHeight: '22px'
                  }}>
                    完了済みの対応事項はありません
                  </div>
                )}
            </div>

            {/* Incomplete TODOs Section */}
            <div style={{ background: '#FFFFFF', border: '1px solid #818181', borderRadius: '13px', padding: '24px', marginBottom: '20px' }}>
              <h3 style={{ fontSize: '28px', fontWeight: 700, marginBottom: '20px', fontFamily: 'Inter', lineHeight: '34px' }}>⚠️ 未完了対応事項</h3>

              {duringCallTodos.filter(todo => {
                const result = todoResults.find(r => r.todoId === todo.todoId)
                return !(result?.checked || false)
              }).map(todo => {
                const result = todoResults.find(r => r.todoId === todo.todoId)
                const isCompleted = false

                return (
                  <div key={todo.todoId} style={{
                    display: 'flex',
                    alignItems: 'flex-start',
                    gap: '16px',
                    padding: '16px',
                    marginBottom: '12px',
                    background: '#FFEBEE',
                    border: '1px solid #FFCDD2',
                    borderRadius: '8px'
                  }}>
                    <div style={{
                      width: '32px',
                      height: '32px',
                      borderRadius: '50%',
                      background: '#F44336',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      color: '#FFF',
                      flexShrink: 0,
                      fontSize: '16px',
                      fontFamily: 'Inter'
                    }}>
                      ✗
                    </div>

                    <div style={{ flex: 1 }}>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
                        {todo.required && (
                          <span style={{
                            padding: '2px 8px',
                            background: '#EB0000',
                            color: '#FFF',
                            borderRadius: '12px',
                            fontSize: '12px',
                            fontWeight: 600,
                            fontFamily: 'Inter'
                          }}>
                            必須
                          </span>
                        )}
                        <span style={{ fontSize: '18px', fontWeight: 500, fontFamily: 'Inter', lineHeight: '22px' }}>{todo.label}</span>
                        <span style={{
                          padding: '2px 8px',
                          background: '#F44336',
                          color: '#FFF',
                          borderRadius: '12px',
                          fontSize: '12px',
                          fontFamily: 'Inter'
                        }}>
                          未完了
                        </span>
                      </div>
                    </div>
                  </div>
                )
              })}

              {duringCallTodos.filter(todo => {
                const result = todoResults.find(r => r.todoId === todo.todoId)
                return !(result?.checked || false)
              }).length === 0 && (
                  <div style={{
                    padding: '20px',
                    textAlign: 'center',
                    color: '#4CAF50',
                    fontFamily: 'Inter',
                    fontSize: '18px',
                    lineHeight: '22px'
                  }}>
                    ✅ すべての対応事項が完了しています
                  </div>
                )}
            </div>
          </div>

          {/* Right Column - After Call TODOs */}
          <div style={{ flex: '0 0 450px' }}>
            <div style={{ background: '#FFFFFF', border: '1px solid #818181', borderRadius: '13px', padding: '24px', marginBottom: '20px' }}>
              <h3 style={{ fontSize: '20px', fontWeight: 600, marginBottom: '20px', fontFamily: 'Inter' }}>事後処理事項</h3>

              {afterCallTodoList.map(todo => (
                <label key={todo.todoId} style={{
                  display: 'flex',
                  alignItems: 'flex-start',
                  gap: '12px',
                  padding: '16px',
                  marginBottom: '12px',
                  background: '#FAFAFA',
                  border: '1px solid #E0E0E0',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  userSelect: 'none'
                }}>
                  <input
                    type="checkbox"
                    checked={afterCallTodos[todo.todoId] || false}
                    onChange={(e) => handleAfterCallTodoToggle(todo.todoId, e.target.checked)}
                    style={{ marginTop: '4px', width: '18px', height: '18px', cursor: 'pointer', flexShrink: 0 }}
                  />
                  <div style={{ flex: 1, pointerEvents: 'none' }}>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
                      {todo.required && (
                        <span style={{
                          padding: '2px 8px',
                          background: '#EB0000',
                          color: '#FFF',
                          borderRadius: '12px',
                          fontSize: '12px',
                          fontWeight: 600,
                          fontFamily: 'Inter'
                        }}>
                          必須
                        </span>
                      )}
                      <span style={{
                        fontSize: '16px',
                        textDecoration: afterCallTodos[todo.todoId] ? 'line-through' : 'none',
                        color: afterCallTodos[todo.todoId] ? '#666' : '#000',
                        fontFamily: 'Inter'
                      }}>
                        {todo.label}
                      </span>
                    </div>
                    <input
                      type="text"
                      placeholder="備考・メモ"
                      value={afterCallNotes[todo.todoId] || ''}
                      onChange={(e) => {
                        e.stopPropagation()
                        handleAfterCallNoteChange(todo.todoId, e.target.value)
                      }}
                      onClick={(e) => e.stopPropagation()}
                      style={{
                        width: '100%',
                        padding: '8px 12px',
                        border: '1px solid #D9D9D9',
                        borderRadius: '6px',
                        fontSize: '14px',
                        fontFamily: 'Inter',
                        pointerEvents: 'auto'
                      }}
                    />
                  </div>
                </label>
              ))}
            </div>

            {/* Auto-Generated TODOs Section */}
            {autoGeneratedTodos.length > 0 && (
              <div style={{ background: '#FFFFFF', border: '1px solid #818181', borderRadius: '13px', padding: '24px', marginBottom: '20px' }}>
                <h3 style={{ fontSize: '20px', fontWeight: 600, marginBottom: '20px', fontFamily: 'Inter', display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <span style={{ fontSize: '20px' }}>🤖</span>
                  自動判定事後処理事項
                </h3>
                <div style={{ fontSize: '14px', color: '#666', marginBottom: '16px', fontFamily: 'Inter', background: '#F0F8FF', padding: '12px', borderRadius: '6px', border: '1px solid #B3D9FF' }}>
                  通話中の完了状況に基づいて自動的に判定された事後処理事項です
                </div>

                {autoGeneratedTodos.map(todo => (
                  <label key={todo.todoId} style={{
                    display: 'flex',
                    alignItems: 'flex-start',
                    gap: '12px',
                    padding: '16px',
                    marginBottom: '12px',
                    background: '#F8FAFF',
                    border: '1px solid #C5D7F0',
                    borderRadius: '8px',
                    cursor: 'pointer',
                    userSelect: 'none'
                  }}>
                    <input
                      type="checkbox"
                      checked={afterCallTodos[todo.todoId] || false}
                      onChange={(e) => handleAfterCallTodoToggle(todo.todoId, e.target.checked)}
                      style={{ marginTop: '4px', width: '18px', height: '18px', cursor: 'pointer', flexShrink: 0 }}
                    />
                    <div style={{ flex: 1, pointerEvents: 'none' }}>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
                        {todo.required && (
                          <span style={{
                            padding: '2px 8px',
                            background: '#EB0000',
                            color: '#FFF',
                            borderRadius: '12px',
                            fontSize: '12px',
                            fontWeight: 600,
                            fontFamily: 'Inter'
                          }}>
                            必須
                          </span>
                        )}
                        <span style={{
                          padding: '2px 8px',
                          background: '#4285F4',
                          color: '#FFF',
                          borderRadius: '12px',
                          fontSize: '12px',
                          fontWeight: 600,
                          fontFamily: 'Inter'
                        }}>
                          自動判定
                        </span>
                        <span style={{
                          fontSize: '16px',
                          textDecoration: afterCallTodos[todo.todoId] ? 'line-through' : 'none',
                          color: afterCallTodos[todo.todoId] ? '#666' : '#000',
                          fontFamily: 'Inter'
                        }}>
                          {todo.label}
                        </span>
                      </div>
                      <div style={{
                        fontSize: '14px',
                        color: '#666',
                        fontFamily: 'Inter',
                        background: '#FFF',
                        padding: '8px 12px',
                        borderRadius: '6px',
                        border: '1px solid #E0E0E0',
                        marginBottom: '8px'
                      }}>
                        判定理由: {todo.reason}
                      </div>
                      <input
                        type="text"
                        placeholder="備考・メモ"
                        value={afterCallNotes[todo.todoId] || ''}
                        onChange={(e) => {
                          e.stopPropagation()
                          handleAfterCallNoteChange(todo.todoId, e.target.value)
                        }}
                        onClick={(e) => e.stopPropagation()}
                        style={{
                          width: '100%',
                          padding: '8px 12px',
                          border: '1px solid #D9D9D9',
                          borderRadius: '6px',
                          fontSize: '14px',
                          fontFamily: 'Inter',
                          pointerEvents: 'auto'
                        }}
                      />
                    </div>
                  </label>
                ))}
              </div>
            )}

            {/* Action Buttons */}
            <div style={{ background: '#FFFFFF', border: '1px solid #818181', borderRadius: '13px', padding: '24px' }}>
              <h3 style={{ fontSize: '18px', fontWeight: 600, marginBottom: '16px', fontFamily: 'Inter' }}>次のアクション</h3>

              <button
                onClick={handleNewCall}
                style={{
                  width: '100%',
                  padding: '16px',
                  background: '#005DDA',
                  color: '#FFF',
                  border: 'none',
                  borderRadius: '30px',
                  fontSize: '18px',
                  fontWeight: 600,
                  cursor: 'pointer',
                  marginBottom: '12px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '8px',
                  fontFamily: 'Inter'
                }}
              >
                新しい通話を開始
              </button>

              <div style={{ fontSize: '12px', color: '#666', textAlign: 'center', fontFamily: 'Inter' }}>
                ※ 事後処理完了後、新しい顧客への通話を開始できます
              </div>

              {hasIncompleteRequired && (
                <div style={{
                  marginTop: '16px',
                  padding: '12px',
                  background: '#FFF3E0',
                  border: '1px solid #FFA726',
                  borderRadius: '8px',
                  fontSize: '14px',
                  color: '#F57C00',
                  fontFamily: 'Inter'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
                    <span style={{ fontWeight: 600 }}>フォローアップが必要</span>
                  </div>
                  <div>
                    必須項目の未完了について、上長への報告や次回アクションの設定を検討してください。
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}